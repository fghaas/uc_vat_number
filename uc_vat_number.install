<?php

/**
 * @file
 * Update and install functions for VAT Number.
 */

/**
 * Implementation of hook_requirements().
 */
function uc_vat_number_requirements($phase) {
  $t = get_t();

  if ($phase == 'runtime') {
    global $soapclient_LIBRARY;
    if (variable_get('uc_store_vat_number_soap', TRUE) == TRUE
      && $soapclient_LIBRARY != 'nuSOAP') {
      /* EU VAT service only plays nice with nuSOAP, PHP SOAP module gives unreliable results... */
      $requirements['uc_vat_number'] = array(
        'severity' => REQUIREMENT_ERROR,
        'title' => $t('Ubercart VAT Number'),
        'value' => $t('VAT validation not functional'),
        'description' => $t('VAT Number validation requires the SOAP Client module to use the <b>nuSOAP</b> library. <a href="!url">Configure SOAP Client</a>.', array('!url' => url('admin/settings/soapclient/config'))),
      );
    }
  }

  return $requirements;
}

/**
 * Implementation of hook_install().
 */
function uc_vat_number_install() {
  drupal_install_schema('uc_vat_number');
}

/**
 * Implementation of hook_schema().
 */
function uc_vat_number_schema() {
  $schema['uc_vat_number'] = array(
    'fields' => array(
      'vat_number_id' => array('type' => 'serial', 'not null' => TRUE),
      'order_id' => array('type' => 'int', 'not null' => TRUE),
      'vat_number' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE),
    ),
    'primary key' => array('vat_number_id'),
  );
  $schema['uc_vat_validation'] = array(
    'fields' => array(
      'vat_validation_id' => array('type' => 'serial', 'not null' => TRUE),
      'vat_number' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE),
      'fetched' => array('type' => 'int', 'not null' => TRUE),
      'response' => array('type' => 'text', 'not null' => TRUE),
    ),
    'primary key' => array('vat_validation_id'),
    'unique keys' => array('vat_number' => array('vat_number')),
  );
  return $schema;
}

/**
 * Implementation of hook_uninstall().
 */
function uc_vat_number_uninstall() {
  // Remove tables
  drupal_uninstall_schema('uc_vat_number');

  variable_del('uc_store_vat_number');
  variable_del('uc_pane_vat_number_enabled');
  variable_del('uc_pane_vat_number_weight');
  variable_del('uc_order_pane_vat_number_show_view');
  variable_del('uc_order_pane_vat_number_weight_view');
}


/**
 * Implementation of hook_update_N().
 */

function uc_vat_number_update_2() {
  $schema['uc_vat_validation'] = array(
    'fields' => array(
      'vat_validation_id' => array('type' => 'serial', 'not null' => TRUE),
      'vat_number' => array('type' => 'varchar', 'length' => 32, 'not null' => TRUE),
      'fetched' => array('type' => 'int', 'not null' => TRUE),
      'response' => array('type' => 'text', 'not null' => TRUE),
    ),
    'primary key' => array('vat_validation_id'),
  );

  $ret = array();
  db_create_table($ret, 'uc_vat_validation', $schema['uc_vat_validation']);
  return $ret;
}

function uc_vat_number_update_5() {
  $ret = array();
  $ret[] = update_sql("TRUNCATE TABLE {uc_vat_validation}");
  db_add_unique_key($ret, 'uc_vat_validation', 'vat_number', array('vat_number'));
  return $ret;
}

function uc_vat_number_update_6200() {
  $on_roles = user_roles(FALSE, 'Have to fill VAT number');
  $off_roles = array_diff(user_roles(FALSE), $on_roles);
  $ret = array();

  if (count($on_roles)) {
    drupal_set_message(t('Version 2 of Ubercart VAT Number significantly changes the way the module handles role permissions. Please refer to <a href="http://drupal.org/node/1052086">the project page</a> for further details.'), 'warning');

    // Removes wrong permission from roles that have it
    $permissions = array();
    foreach ($on_roles as $rid => $role) {
      $q = db_query("SELECT perm FROM {permission} WHERE rid = %d;", $rid);
      $obj = db_fetch_object($q);
      $perm = explode(", ", $obj->perm);
      // If wrong permission is the only permission, permissions for this role won't be regenerated
      if (count($perm) > 1) {
        foreach ($perm as $key => $val) {
          if ($val == 'Have to fill VAT number') {
            unset($perm[$key]);
          }
        }
        $permissions[$rid] = implode(", ", $perm);
      }
    }

    // Restores permissions for remaining roles
    foreach ($off_roles as $rid => $role) {
      $q = db_query("SELECT perm FROM {permission} WHERE rid = %d;", $rid);
      $obj = db_fetch_object($q);
      if ($obj->perm != '') {
        $permissions[$rid] = $obj->perm;
      }
    }

    ksort($permissions);

    // Empties permission table
    $ret[] = update_sql("TRUNCATE {permission};");

    // Assigns updated roles
    if (count($permissions)) {
      $values = array();
      foreach ($permissions as $rid => $perm) {
        $values[] = "('$rid', '$perm')";
      }
      $values = implode(", ", $values);
      $ret[] = update_sql("INSERT INTO {permission} (rid, perm) VALUES $values;");
    }

    $uc_vat_number_roles = array();
    foreach ($on_roles as $rid => $role) {
      $uc_vat_number_roles[$rid] = $rid;
    }

    foreach ($off_roles as $rid => $role) {
      $uc_vat_number_roles[$rid] = 0;
    }

    variable_set('uc_vat_number_roles', $uc_vat_number_roles);
  }

  return $ret;
}
